# Project

This is a project to index my discogs collection, placing the data into the `website` directory, which is a static website built with Hugo. It uses a SQLite database to cache the data to avoid rate limiting and to speed up the processing.

- The project uses the discogs API to get the data.
- The project uses the wikipedia API to get the data.
- The project uses the apple music API to get the data.
- The project uses the spotify API to get the data.

Here is some information about the projects files:

- `.cursorrules` is the file that contains the rules for the project.
- `album_template.md` is a markdown file that contains the template for the album pages.
- `artist_template.md` is a markdown file that contains the template for the artist pages.
- `backups` is the directory for backups - this should be ignored.
- `collection_cache.db` is the sqlite database that contains the collection cached data.
- `collection_editor.py` is a Streamlit powered web app to edit the sqlite cache database.
- `db_handler.py` is a helper library for the database.
- `discogs_scraper.py` is the main program.
- `README.md` is the readme for the project.
- `requirements.txt` is the file that contains the dependencies for the project.
- `secrets.json` is a file that contains the secrets for the project.
- `utils.py` is a helper library for the project.
- `website` is the directory for the static website.

# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output:
  - Use logging levels appropriately (INFO for main operations, DEBUG for details, WARNING for expected issues, ERROR for problems)
  - Log all API interactions with request details and responses
  - Include timing information in log format
  - Store logs in dated files under logs/ directory
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Lessons Learned

1. API Integration:
   - Always verify API tokens before starting main processing
   - Keep API data structures separate (don't mix Apple Music with Wikipedia data)
   - Add proper error handling and logging for each API call
   - Handle Discogs API object attributes directly (e.g., video.url) rather than using get() method

2. Data Structure:
   - When caching API responses, maintain consistent data structure
   - Document the expected data structure for each API integration
   - Add validation for required fields

3. Debugging:
   - Added more detailed logging for API calls
   - Separated concerns between different data sources
   - Added token verification to catch authentication issues early

2. Need better artist data management:
    - Should separate artist data into its own table
    - Need to cache artist info independently of releases
    - Need to handle artist updates separately

4. Artist Page Generation:
   - Don't overwrite existing artist images or pages
   - Use high resolution images from Apple Music (2000x2000)
   - Maintain consistent image and file naming using slugs
   - Keep existing text formatting and sanitization
   - Verify artists exist in cache during release processing
   - Properly sanitize artist names by removing numbers in brackets
   - Skip generation if both image and _index.md exist

5. Data Safety:
   - Never include data deletion in migration scripts
   - Make data deletion a manual process
   - Add checks before any destructive operations

6. Utils Functions Added:
   - get_spotify_token: Handles Spotify API authentication
   - get_spotify_id: Searches for album IDs on Spotify
   - extract_youtube_id: Extracts video IDs from YouTube URLs
   - format_youtube_embed: Creates Hugo shortcodes for YouTube videos
   - format_track_duration: Formats track durations consistently
   - format_track_list: Creates markdown tables for track listings
   - format_release_formats: Formats release format information
   - get_best_artist_profile: Formats artist profiles with proper markdown
   - Added proper error handling and logging for API calls
   - Added rate limit and token validation checks

# Scratchpad

## TODO Tasks
- [X] **Merge duplicate functions:**  
      Remove `format_tracklist()` from `discogs_scraper.py` and update the code to use `format_track_list()` from `utils.py`.
- [X] **Unify release format formatting:**  
      Remove the duplicate `format_release_formats()` from `discogs_scraper.py` and consolidate functionality to use the version from `utils.py`.
- [X] **Centralize image downloading:**  
      Move `download_image()` from `discogs_scraper.py` into `utils.py` (keeping `download_artist_image()` as is) so that both image downloading functions are centralized.
- [X] **Unify artist markdown generation:**  
      Consolidate `create_artist_markdown_file()` in `discogs_scraper.py` and `generate_artist_page()` in `db_handler.py` into one common function (potentially moved to `utils.py`).
- [X] **Consistent progress tracking:**  
      Replaced file-based last processed index tracking with the database-based method in the `processed_index` table.
- [ ] **Review sanitization helpers:**  
      Evaluate functions like `escape_quotes()` and `format_notes()` for potential consolidation into `utils.py` to ensure consistent text/sanitization handling across modules.

