# Project

This is a project to index my discogs collection, placing the data into the `website` directory, which is a static website built with Hugo. It uses a SQLite database to cache the data to avoid rate limiting and to speed up the processing.

- The project uses the discogs API to get the data.
- The project uses the wikipedia API to get the data.
- The project uses the apple music API to get the data.
- The project uses the spotify API to get the data.

Here is some information about the projects files:

- `discogs_scraper.py` is the main program.
- `collection_editor.py` is a Streamlit poweredweb app to edit the sqlite cache database.
- `db_handler.py` is a helper library for the database.
- `website` is the directory for the static website.
- `backups` is the directory for backups - this should be ignored.
- `secrets.json` is a file that contains the secrets for the project.
- `collection_cache.db` is the sqlite database that contains the collection cached data.
- `album_template.md` is a markdown file that contains the template for the album pages.
- `artist_template.md` is a markdown file that contains the template for the artist pages.
- `utils.py` is a helper library for the project.

# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output:
  - Use logging levels appropriately (INFO for main operations, DEBUG for details, WARNING for expected issues, ERROR for problems)
  - Log all API interactions with request details and responses
  - Include timing information in log format
  - Store logs in dated files under logs/ directory
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Comprehensive API logging best practices:
  - Log all API requests with URLs and parameters
  - Log response status codes and content for failures
  - Include search terms and results for matching operations
  - Track API rate limits and retries
  - Use consistent log format: timestamp - level - message
  - Separate logs by date for easier debugging

# Scratchpad

## Apple Music Integration Fix Analysis

Task: Fix Apple Music integration that stopped working after moving to SQLite caching

Findings:
1. Comparing working version (0f1a396) with current:
   - Apple Music data structure changed
   - Artist info handling was mixing Apple Music and Wikipedia data incorrectly
   - No token verification was in place

Changes Made:
[X] Added Apple Music token verification
[X] Fixed data structure for Apple Music attributes
[X] Improved error handling and logging
[X] Separated artist info from Apple Music data
[X] Added proper attribute checks for Apple Music data
[X] Added comprehensive logging for all API interactions:
    - Request details (URLs, parameters)
    - Response status and content
    - Search results and matching
    - Error handling and retries

Next Steps:
[x] Test with a few releases to verify fix
[x] Monitor logs for Apple Music API responses
[ ] Consider adding retry mechanism for failed Apple Music requests

## Artist Page Generation Fix

Task: Fix artist page generation that stopped working

Findings:
1. Artist info handling was incorrect:
   - Wikipedia data wasn't being fetched properly
   - Image URLs weren't being processed correctly
   - Profile text selection logic was flawed
   - Not fetching full artist data from Discogs
   - Not properly handling missing artist fields
   - Not properly calling process_artist function
   - Not maintaining processed artists set

Changes Made:
[X] Fixed artist info retrieval from Discogs
[X] Added full artist data fetching using artist ID
[X] Added fallback for basic artist info if full fetch fails
[X] Separated Wikipedia data handling for artists
[X] Improved image URL handling
[X] Fixed profile/summary text selection
[X] Added proper error handling and logging
[X] Added proper artist page generation in process_item
[X] Added processed artists tracking
[X] Added --artists-only flag for regenerating just artist pages
[X] Added artists table to database
[X] Added functions to save/get artist data
[X] Modified process_item to cache artist info separately
[X] Added migration function to populate artists table from releases
[X] Fixed artist data extraction from releases
[X] Added better error handling and logging for migration

Next Steps:
[X] Test database schema changes
[X] Add migration function for artist data
[X] Fix artist data extraction from releases
[X] Run migration and verify data
[X] Remove data deletion from migration script
[ ] Update artist page generation:
    [ ] Add image handling logic (Apple Music 2000x2000 -> Discogs)
    [ ] Add skip logic for existing _index.md files
    [ ] Update profile source priority (Apple Music -> Discogs -> Wikipedia)
    [ ] Keep existing sanitization and markdown formatting
[ ] Add artist verification during release processing
[ ] Add function to refresh artist cache
[ ] Add periodic cleanup of old artist data
[ ] Test artist page generation with various artists
[ ] Verify image downloads are working
[ ] Check artist template rendering
[ ] Add retry mechanism for artist data fetching
[ ] Consider caching artist data separately
[ ] Add cleanup of processed_artists set periodically
[ ] Test artists-only regeneration with large collection

## Lessons Learned

1. API Integration:
   - Always verify API tokens before starting main processing
   - Keep API data structures separate (don't mix Apple Music with Wikipedia data)
   - Add proper error handling and logging for each API call

2. Data Structure:
   - When caching API responses, maintain consistent data structure
   - Document the expected data structure for each API integration
   - Add validation for required fields

3. Debugging:
   - Added more detailed logging for API calls
   - Separated concerns between different data sources
   - Added token verification to catch authentication issues early

2. Need better artist data management:
    - Should separate artist data into its own table
    - Need to cache artist info independently of releases
    - Need to handle artist updates separately

4. Artist Page Generation:
   - Don't overwrite existing artist images or pages
   - Use high resolution images from Apple Music (2000x2000)
   - Maintain consistent image and file naming using slugs
   - Keep existing text formatting and sanitization
   - Verify artists exist in cache during release processing

5. Data Safety:
   - Never include data deletion in migration scripts
   - Make data deletion a manual process
   - Add checks before any destructive operations

6. Utils Functions Added:
   - get_spotify_token: Handles Spotify API authentication
   - get_spotify_id: Searches for album IDs on Spotify
   - Added proper error handling and logging for API calls
   - Added rate limit and token validation checks

