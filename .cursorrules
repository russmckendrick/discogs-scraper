# Project

This is a project to index my discogs collection, placing the data into the `website` directory, which is a static website built with Hugo. It uses a SQLite database to cache the data to avoid rate limiting and to speed up the processing.

- The project uses the discogs API to get the data.
- The project uses the wikipedia API to get the data.
- The project uses the apple music API to get the data.
- The project uses the spotify API to get the data.

Here is some information about the projects files:

- `discogs_scraper.py` is the main program.
- `collection_editor.py` is a Streamlit poweredweb app to edit the sqlite cache database.
- `db_handler.py` is a helper library for the database.
- `website` is the directory for the static website.
- `backups` is the directory for backups - this should be ignored.
- `secrets.json` is a file that contains the secrets for the project.

# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes

# Scratchpad

